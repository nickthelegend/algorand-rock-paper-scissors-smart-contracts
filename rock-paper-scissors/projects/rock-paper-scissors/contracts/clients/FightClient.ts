/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Fight","desc":"","methods":[{"name":"createApplication","args":[{"name":"player1","type":"address"},{"name":"player2","type":"address"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createBox","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"depositfunds","args":[{"name":"ftransx","type":"txn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"sendFunds","args":[{"name":"player","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"joinGame","args":[{"name":"player","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":4,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"player1":{"key":"cGxheWVyMQ==","keyType":"AVMBytes","valueType":"address"},"player2":{"key":"cGxheWVyMg==","keyType":"AVMBytes","valueType":"address"},"depositedAmount":{"key":"ZGVwb3NpdGVkQW1vdW50","keyType":"AVMBytes","valueType":"uint64"},"maxDepositAmount":{"key":"bWF4RGVwb3NpdEFtb3VudA==","keyType":"AVMBytes","valueType":"uint64"},"winner":{"key":"d2lubmVy","keyType":"AVMBytes","valueType":"address"},"status":{"key":"c3RhdHVz","keyType":"AVMBytes","valueType":"string"}},"local":{},"box":{"player1Move":{"key":"cGxheWVyMU1vdmU=","keyType":"AVMBytes","valueType":"string"},"player2Move":{"key":"cGxheWVyMk1vdmU=","keyType":"AVMBytes","valueType":"string"}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/GameContract.algo.ts:4","pc":[0]},{"teal":2,"source":"contracts/GameContract.algo.ts:4","pc":[1,2,3,4,5,6,7]},{"teal":3,"source":"contracts/GameContract.algo.ts:4","pc":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]},{"teal":15,"source":"contracts/GameContract.algo.ts:4","pc":[42,43]},{"teal":16,"source":"contracts/GameContract.algo.ts:4","pc":[44]},{"teal":17,"source":"contracts/GameContract.algo.ts:4","pc":[45,46]},{"teal":18,"source":"contracts/GameContract.algo.ts:4","pc":[47]},{"teal":19,"source":"contracts/GameContract.algo.ts:4","pc":[48,49]},{"teal":20,"source":"contracts/GameContract.algo.ts:4","pc":[50]},{"teal":21,"source":"contracts/GameContract.algo.ts:4","pc":[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76]},{"teal":25,"source":"contracts/GameContract.algo.ts:4","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[77]},{"teal":30,"source":"contracts/GameContract.algo.ts:18","pc":[78,79,80]},{"teal":31,"source":"contracts/GameContract.algo.ts:18","pc":[81]},{"teal":32,"source":"contracts/GameContract.algo.ts:18","pc":[82]},{"teal":33,"source":"contracts/GameContract.algo.ts:18","pc":[83]},{"teal":34,"source":"contracts/GameContract.algo.ts:18","pc":[84]},{"teal":37,"source":"contracts/GameContract.algo.ts:18","errorMessage":"argument 0 (player2) for createApplication must be a address","pc":[85]},{"teal":40,"source":"contracts/GameContract.algo.ts:18","pc":[86,87,88]},{"teal":41,"source":"contracts/GameContract.algo.ts:18","pc":[89]},{"teal":42,"source":"contracts/GameContract.algo.ts:18","pc":[90]},{"teal":43,"source":"contracts/GameContract.algo.ts:18","pc":[91]},{"teal":44,"source":"contracts/GameContract.algo.ts:18","pc":[92]},{"teal":47,"source":"contracts/GameContract.algo.ts:18","errorMessage":"argument 1 (player1) for createApplication must be a address","pc":[93]},{"teal":50,"source":"contracts/GameContract.algo.ts:18","pc":[94,95,96]},{"teal":51,"source":"contracts/GameContract.algo.ts:18","pc":[97]},{"teal":52,"source":"contracts/GameContract.algo.ts:18","pc":[98]},{"teal":56,"source":"contracts/GameContract.algo.ts:18","pc":[99,100,101]},{"teal":60,"source":"contracts/GameContract.algo.ts:21","pc":[102]},{"teal":61,"source":"contracts/GameContract.algo.ts:21","pc":[103,104]},{"teal":62,"source":"contracts/GameContract.algo.ts:21","pc":[105]},{"teal":66,"source":"contracts/GameContract.algo.ts:22","pc":[106]},{"teal":67,"source":"contracts/GameContract.algo.ts:22","pc":[107,108]},{"teal":68,"source":"contracts/GameContract.algo.ts:22","pc":[109]},{"teal":72,"source":"contracts/GameContract.algo.ts:23","pc":[110]},{"teal":73,"source":"contracts/GameContract.algo.ts:23","pc":[111]},{"teal":74,"source":"contracts/GameContract.algo.ts:23","pc":[112]},{"teal":78,"source":"contracts/GameContract.algo.ts:24","pc":[113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130]},{"teal":79,"source":"contracts/GameContract.algo.ts:24","pc":[131,132]},{"teal":80,"source":"contracts/GameContract.algo.ts:24","pc":[133]},{"teal":81,"source":"contracts/GameContract.algo.ts:18","pc":[134]},{"teal":86,"source":"contracts/GameContract.algo.ts:28","pc":[135,136,137]},{"teal":87,"source":"contracts/GameContract.algo.ts:28","pc":[138]},{"teal":88,"source":"contracts/GameContract.algo.ts:28","pc":[139]},{"teal":92,"source":"contracts/GameContract.algo.ts:28","pc":[140,141,142]},{"teal":96,"source":"contracts/GameContract.algo.ts:29","pc":[143,144,145,146,147,148,149,150,151,152,153,154,155]},{"teal":97,"source":"contracts/GameContract.algo.ts:29","pc":[156]},{"teal":98,"source":"contracts/GameContract.algo.ts:29","pc":[157]},{"teal":99,"source":"contracts/GameContract.algo.ts:29","pc":[158]},{"teal":103,"source":"contracts/GameContract.algo.ts:30","pc":[159,160,161,162,163,164,165,166,167,168,169,170,171]},{"teal":104,"source":"contracts/GameContract.algo.ts:30","pc":[172]},{"teal":105,"source":"contracts/GameContract.algo.ts:30","pc":[173]},{"teal":106,"source":"contracts/GameContract.algo.ts:30","pc":[174]},{"teal":107,"source":"contracts/GameContract.algo.ts:28","pc":[175]},{"teal":112,"source":"contracts/GameContract.algo.ts:34","pc":[176,177]},{"teal":113,"source":"contracts/GameContract.algo.ts:34","pc":[178]},{"teal":114,"source":"contracts/GameContract.algo.ts:34","pc":[179]},{"teal":117,"source":"contracts/GameContract.algo.ts:34","pc":[180,181,182]},{"teal":118,"source":"contracts/GameContract.algo.ts:34","pc":[183]},{"teal":119,"source":"contracts/GameContract.algo.ts:34","pc":[184]},{"teal":123,"source":"contracts/GameContract.algo.ts:34","pc":[185,186,187]},{"teal":131,"source":"contracts/GameContract.algo.ts:36","pc":[188,189]},{"teal":132,"source":"contracts/GameContract.algo.ts:36","pc":[190,191,192]},{"teal":133,"source":"contracts/GameContract.algo.ts:36","pc":[193,194]},{"teal":134,"source":"contracts/GameContract.algo.ts:36","pc":[195]},{"teal":135,"source":"contracts/GameContract.algo.ts:36","pc":[196]},{"teal":136,"source":"contracts/GameContract.algo.ts:36","pc":[197]},{"teal":137,"source":"contracts/GameContract.algo.ts:36","pc":[198,199,200]},{"teal":138,"source":"contracts/GameContract.algo.ts:37","pc":[201,202]},{"teal":139,"source":"contracts/GameContract.algo.ts:37","pc":[203]},{"teal":140,"source":"contracts/GameContract.algo.ts:37","pc":[204]},{"teal":141,"source":"contracts/GameContract.algo.ts:37","pc":[205]},{"teal":142,"source":"contracts/GameContract.algo.ts:36","pc":[206]},{"teal":145,"source":"contracts/GameContract.algo.ts:37","pc":[207]},{"teal":146,"source":"contracts/GameContract.algo.ts:37","pc":[208,209,210]},{"teal":147,"source":"contracts/GameContract.algo.ts:38","pc":[211,212]},{"teal":148,"source":"contracts/GameContract.algo.ts:38","pc":[213]},{"teal":149,"source":"contracts/GameContract.algo.ts:38","pc":[214]},{"teal":150,"source":"contracts/GameContract.algo.ts:38","pc":[215]},{"teal":151,"source":"contracts/GameContract.algo.ts:37","pc":[216]},{"teal":154,"source":"contracts/GameContract.algo.ts:35","pc":[217]},{"teal":163,"source":"contracts/GameContract.algo.ts:41","pc":[218,219]},{"teal":164,"source":"contracts/GameContract.algo.ts:41","pc":[220,221]},{"teal":165,"source":"contracts/GameContract.algo.ts:41","pc":[222]},{"teal":166,"source":"contracts/GameContract.algo.ts:41","pc":[223]},{"teal":169,"source":"contracts/GameContract.algo.ts:41","errorMessage":"transaction verification failed: {\"txn\":\"ftransx\",\"field\":\"typeEnum\",\"expected\":\"pay\"}","pc":[224]},{"teal":172,"source":"contracts/GameContract.algo.ts:41","pc":[225,226]},{"teal":173,"source":"contracts/GameContract.algo.ts:42","pc":[227,228]},{"teal":174,"source":"contracts/GameContract.algo.ts:42","pc":[229,230]},{"teal":175,"source":"contracts/GameContract.algo.ts:42","pc":[231]},{"teal":178,"source":"contracts/GameContract.algo.ts:42","errorMessage":"transaction verification failed: {\"txn\":\"ftransx\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[232]},{"teal":182,"source":"contracts/GameContract.algo.ts:46","pc":[233]},{"teal":183,"source":"contracts/GameContract.algo.ts:46","pc":[234]},{"teal":184,"source":"contracts/GameContract.algo.ts:46","pc":[235,236]},{"teal":185,"source":"contracts/GameContract.algo.ts:46","pc":[237,238]},{"teal":186,"source":"contracts/GameContract.algo.ts:46","pc":[239]},{"teal":187,"source":"contracts/GameContract.algo.ts:46","pc":[240]},{"teal":188,"source":"contracts/GameContract.algo.ts:46","pc":[241]},{"teal":189,"source":"contracts/GameContract.algo.ts:46","pc":[242]},{"teal":190,"source":"contracts/GameContract.algo.ts:34","pc":[243]},{"teal":195,"source":"contracts/GameContract.algo.ts:52","pc":[244,245,246]},{"teal":196,"source":"contracts/GameContract.algo.ts:52","pc":[247]},{"teal":197,"source":"contracts/GameContract.algo.ts:52","pc":[248]},{"teal":198,"source":"contracts/GameContract.algo.ts:52","pc":[249]},{"teal":199,"source":"contracts/GameContract.algo.ts:52","pc":[250]},{"teal":202,"source":"contracts/GameContract.algo.ts:52","errorMessage":"argument 0 (player) for sendFunds must be a address","pc":[251]},{"teal":205,"source":"contracts/GameContract.algo.ts:52","pc":[252,253,254]},{"teal":206,"source":"contracts/GameContract.algo.ts:52","pc":[255]},{"teal":207,"source":"contracts/GameContract.algo.ts:52","pc":[256]},{"teal":211,"source":"contracts/GameContract.algo.ts:52","pc":[257,258,259]},{"teal":217,"source":"contracts/GameContract.algo.ts:55","pc":[260,261]},{"teal":218,"source":"contracts/GameContract.algo.ts:55","pc":[262,263,264]},{"teal":219,"source":"contracts/GameContract.algo.ts:55","pc":[265,266]},{"teal":220,"source":"contracts/GameContract.algo.ts:55","pc":[267]},{"teal":221,"source":"contracts/GameContract.algo.ts:55","pc":[268]},{"teal":222,"source":"contracts/GameContract.algo.ts:54","pc":[269]},{"teal":229,"source":"contracts/GameContract.algo.ts:57","pc":[270]},{"teal":230,"source":"contracts/GameContract.algo.ts:57","pc":[271]},{"teal":231,"source":"contracts/GameContract.algo.ts:57","pc":[272,273]},{"teal":235,"source":"contracts/GameContract.algo.ts:58","pc":[274,275]},{"teal":236,"source":"contracts/GameContract.algo.ts:58","pc":[276,277]},{"teal":240,"source":"contracts/GameContract.algo.ts:59","pc":[278]},{"teal":241,"source":"contracts/GameContract.algo.ts:59","pc":[279]},{"teal":242,"source":"contracts/GameContract.algo.ts:59","pc":[280,281]},{"teal":245,"source":"contracts/GameContract.algo.ts:57","pc":[282]},{"teal":246,"source":"contracts/GameContract.algo.ts:57","pc":[283,284]},{"teal":249,"source":"contracts/GameContract.algo.ts:57","pc":[285]},{"teal":253,"source":"contracts/GameContract.algo.ts:61","pc":[286]},{"teal":254,"source":"contracts/GameContract.algo.ts:61","pc":[287]},{"teal":255,"source":"contracts/GameContract.algo.ts:61","pc":[288]},{"teal":256,"source":"contracts/GameContract.algo.ts:52","pc":[289]},{"teal":261,"source":"contracts/GameContract.algo.ts:68","pc":[290,291,292]},{"teal":262,"source":"contracts/GameContract.algo.ts:68","pc":[293]},{"teal":263,"source":"contracts/GameContract.algo.ts:68","pc":[294]},{"teal":264,"source":"contracts/GameContract.algo.ts:68","pc":[295]},{"teal":265,"source":"contracts/GameContract.algo.ts:68","pc":[296]},{"teal":268,"source":"contracts/GameContract.algo.ts:68","errorMessage":"argument 0 (player) for joinGame must be a address","pc":[297]},{"teal":271,"source":"contracts/GameContract.algo.ts:68","pc":[298,299,300]},{"teal":272,"source":"contracts/GameContract.algo.ts:68","pc":[301]},{"teal":273,"source":"contracts/GameContract.algo.ts:68","pc":[302]},{"teal":277,"source":"contracts/GameContract.algo.ts:68","pc":[303,304,305]},{"teal":283,"source":"contracts/GameContract.algo.ts:70","pc":[306,307,308]},{"teal":284,"source":"contracts/GameContract.algo.ts:70","pc":[309]},{"teal":285,"source":"contracts/GameContract.algo.ts:70","pc":[310]},{"teal":286,"source":"contracts/GameContract.algo.ts:70","pc":[311]},{"teal":287,"source":"contracts/GameContract.algo.ts:70","pc":[312]},{"teal":288,"source":"contracts/GameContract.algo.ts:70","pc":[313]},{"teal":289,"source":"contracts/GameContract.algo.ts:69","pc":[314]},{"teal":293,"source":"contracts/GameContract.algo.ts:73","pc":[315]},{"teal":294,"source":"contracts/GameContract.algo.ts:73","pc":[316,317]},{"teal":295,"source":"contracts/GameContract.algo.ts:73","pc":[318]},{"teal":296,"source":"contracts/GameContract.algo.ts:68","pc":[319]},{"teal":299,"source":"contracts/GameContract.algo.ts:4","pc":[320,321,322,323,324,325]},{"teal":300,"source":"contracts/GameContract.algo.ts:4","pc":[326,327,328]},{"teal":301,"source":"contracts/GameContract.algo.ts:4","pc":[329,330,331,332]},{"teal":304,"source":"contracts/GameContract.algo.ts:4","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[333]},{"teal":307,"source":"contracts/GameContract.algo.ts:4","pc":[334,335,336,337,338,339]},{"teal":308,"source":"contracts/GameContract.algo.ts:4","pc":[340,341,342,343,344,345]},{"teal":309,"source":"contracts/GameContract.algo.ts:4","pc":[346,347,348,349,350,351]},{"teal":310,"source":"contracts/GameContract.algo.ts:4","pc":[352,353,354,355,356,357]},{"teal":311,"source":"contracts/GameContract.algo.ts:4","pc":[358,359,360]},{"teal":312,"source":"contracts/GameContract.algo.ts:4","pc":[361,362,363,364,365,366,367,368,369,370]},{"teal":315,"source":"contracts/GameContract.algo.ts:4","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[371]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEASAAkAMmAw9kZXBvc2l0ZWRBbW91bnQHcGxheWVyMgdwbGF5ZXIxMRgUgQYLMRkIjQwBAQAAAAAAAAAAAAAA8wAAAAAAAAAAAAAANhoCSRUjEkQ2GgFJFSMSRIgAAiJDigIAKov/ZymL/mcoJGeAEG1heERlcG9zaXRBbW91bnSBBWeJiAACIkOKAACAC3BsYXllcjFNb3ZlJblIgAtwbGF5ZXIyTW92ZSW5SIkxFiIJiAACIkOKAQAxADYyAHIHSBJJQAAGMQAqZBIRSUAABjEAKWQSEUSL/zgQIhJEi/84BzIKEkQoZIv/OBIIKExniTYaAUkVIxJEiAACIkOKAQAxADYyAHIHSBJEsSKyEIv/sgcoZLIIJLIBsygkZ4k2GgFJFSMSRIgAAiJDigEANjIAKWVMSBREKYv/Z4mABLTHfXE2GgCOAf8BAIAE6gRQNoAESGdUcIAEOhnQ3oAEN/6dzDYaAI4E/xT/Pf+B/68A","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Fight contract
 */
export type FightArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address,address)void': {
      player1: string
      player2: string
    }
    'createBox()void': Record<string, never>
    'depositfunds(txn)void': {
      ftransx: AppMethodCallTransactionArgument
    }
    'sendFunds(address)void': {
      player: string
    }
    'joinGame(address)void': {
      player: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address,address)void': [player1: string, player2: string]
    'createBox()void': []
    'depositfunds(txn)void': [ftransx: AppMethodCallTransactionArgument]
    'sendFunds(address)void': [player: string]
    'joinGame(address)void': [player: string]
  }
}

/**
 * The return type for each method
 */
export type FightReturns = {
  'createApplication(address,address)void': void
  'createBox()void': void
  'depositfunds(txn)void': void
  'sendFunds(address)void': void
  'joinGame(address)void': void
}

/**
 * Defines the types of available calls and state of the Fight smart contract.
 */
export type FightTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address)void' | 'createApplication', {
      argsObj: FightArgs['obj']['createApplication(address,address)void']
      argsTuple: FightArgs['tuple']['createApplication(address,address)void']
      returns: FightReturns['createApplication(address,address)void']
    }>
    & Record<'createBox()void' | 'createBox', {
      argsObj: FightArgs['obj']['createBox()void']
      argsTuple: FightArgs['tuple']['createBox()void']
      returns: FightReturns['createBox()void']
    }>
    & Record<'depositfunds(txn)void' | 'depositfunds', {
      argsObj: FightArgs['obj']['depositfunds(txn)void']
      argsTuple: FightArgs['tuple']['depositfunds(txn)void']
      returns: FightReturns['depositfunds(txn)void']
    }>
    & Record<'sendFunds(address)void' | 'sendFunds', {
      argsObj: FightArgs['obj']['sendFunds(address)void']
      argsTuple: FightArgs['tuple']['sendFunds(address)void']
      returns: FightReturns['sendFunds(address)void']
    }>
    & Record<'joinGame(address)void' | 'joinGame', {
      argsObj: FightArgs['obj']['joinGame(address)void']
      argsTuple: FightArgs['tuple']['joinGame(address)void']
      returns: FightReturns['joinGame(address)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        player1: string
        player2: string
        depositedAmount: bigint
        maxDepositAmount: bigint
        winner: string
        status: string
      }
      maps: {}
    }
    box: {
      keys: {
        player1Move: string
        player2Move: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FightSignatures = keyof FightTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FightNonVoidMethodSignatures = keyof FightTypes['methods'] extends infer T ? T extends keyof FightTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Fight smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FightSignatures> = FightTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Fight smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FightSignatures> = FightTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FightTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = FightTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FightCreateCallParams =
  | Expand<CallParams<FightArgs['obj']['createApplication(address,address)void'] | FightArgs['tuple']['createApplication(address,address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<FightArgs['obj']['createApplication(address,address)void'] | FightArgs['tuple']['createApplication(address,address)void']> & {method: 'createApplication(address,address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FightDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FightCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Fight smart contract
 */
export abstract class FightParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends FightCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address,address)void':
            return FightParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Fight smart contract using the createApplication(address,address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<FightArgs['obj']['createApplication(address,address)void'] | FightArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address,address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.player1, params.args.player2],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createBox()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createBox(params: CallParams<FightArgs['obj']['createBox()void'] | FightArgs['tuple']['createBox()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createBox()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the depositfunds(txn)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static depositfunds(params: CallParams<FightArgs['obj']['depositfunds(txn)void'] | FightArgs['tuple']['depositfunds(txn)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'depositfunds(txn)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ftransx],
    }
  }
  /**
   * Constructs a no op call for the sendFunds(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendFunds(params: CallParams<FightArgs['obj']['sendFunds(address)void'] | FightArgs['tuple']['sendFunds(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendFunds(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.player],
    }
  }
  /**
   * Constructs a no op call for the joinGame(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static joinGame(params: CallParams<FightArgs['obj']['joinGame(address)void'] | FightArgs['tuple']['joinGame(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'joinGame(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.player],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Fight smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FightFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FightFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FightClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FightClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Fight smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FightDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? FightParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (FightCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new FightClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Fight smart contract using the createApplication(address,address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<FightArgs['obj']['createApplication(address,address)void'] | FightArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(FightParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Fight smart contract using the createApplication(address,address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<FightArgs['obj']['createApplication(address,address)void'] | FightArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(FightParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Fight smart contract using an ABI method call using the createApplication(address,address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<FightArgs['obj']['createApplication(address,address)void'] | FightArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(FightParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | FightReturns['createApplication(address,address)void']) }, appClient: new FightClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Fight smart contract
 */
export class FightClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FightClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Fight app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FightClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FightNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FightClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FightClient> {
    return new FightClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FightClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FightClient> {
    return new FightClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Fight smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Fight smart contract using the `createBox()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createBox: (params: CallParams<FightArgs['obj']['createBox()void'] | FightArgs['tuple']['createBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FightParamsFactory.createBox(params))
    },

    /**
     * Makes a call to the Fight smart contract using the `depositfunds(txn)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    depositfunds: (params: CallParams<FightArgs['obj']['depositfunds(txn)void'] | FightArgs['tuple']['depositfunds(txn)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FightParamsFactory.depositfunds(params))
    },

    /**
     * Makes a call to the Fight smart contract using the `sendFunds(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendFunds: (params: CallParams<FightArgs['obj']['sendFunds(address)void'] | FightArgs['tuple']['sendFunds(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FightParamsFactory.sendFunds(params))
    },

    /**
     * Makes a call to the Fight smart contract using the `joinGame(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    joinGame: (params: CallParams<FightArgs['obj']['joinGame(address)void'] | FightArgs['tuple']['joinGame(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FightParamsFactory.joinGame(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Fight smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Fight smart contract using the `createBox()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createBox: (params: CallParams<FightArgs['obj']['createBox()void'] | FightArgs['tuple']['createBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FightParamsFactory.createBox(params))
    },

    /**
     * Makes a call to the Fight smart contract using the `depositfunds(txn)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    depositfunds: (params: CallParams<FightArgs['obj']['depositfunds(txn)void'] | FightArgs['tuple']['depositfunds(txn)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FightParamsFactory.depositfunds(params))
    },

    /**
     * Makes a call to the Fight smart contract using the `sendFunds(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendFunds: (params: CallParams<FightArgs['obj']['sendFunds(address)void'] | FightArgs['tuple']['sendFunds(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FightParamsFactory.sendFunds(params))
    },

    /**
     * Makes a call to the Fight smart contract using the `joinGame(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    joinGame: (params: CallParams<FightArgs['obj']['joinGame(address)void'] | FightArgs['tuple']['joinGame(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FightParamsFactory.joinGame(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Fight smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Fight smart contract using the `createBox()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createBox: async (params: CallParams<FightArgs['obj']['createBox()void'] | FightArgs['tuple']['createBox()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FightParamsFactory.createBox(params))
      return {...result, return: result.return as unknown as (undefined | FightReturns['createBox()void'])}
    },

    /**
     * Makes a call to the Fight smart contract using the `depositfunds(txn)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    depositfunds: async (params: CallParams<FightArgs['obj']['depositfunds(txn)void'] | FightArgs['tuple']['depositfunds(txn)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FightParamsFactory.depositfunds(params))
      return {...result, return: result.return as unknown as (undefined | FightReturns['depositfunds(txn)void'])}
    },

    /**
     * Makes a call to the Fight smart contract using the `sendFunds(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendFunds: async (params: CallParams<FightArgs['obj']['sendFunds(address)void'] | FightArgs['tuple']['sendFunds(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FightParamsFactory.sendFunds(params))
      return {...result, return: result.return as unknown as (undefined | FightReturns['sendFunds(address)void'])}
    },

    /**
     * Makes a call to the Fight smart contract using the `joinGame(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    joinGame: async (params: CallParams<FightArgs['obj']['joinGame(address)void'] | FightArgs['tuple']['joinGame(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FightParamsFactory.joinGame(params))
      return {...result, return: result.return as unknown as (undefined | FightReturns['joinGame(address)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FightClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Fight app
   */
  state = {
    /**
     * Methods to access global state for the current Fight app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          player1: result.player1,
          player2: result.player2,
          depositedAmount: result.depositedAmount,
          maxDepositAmount: result.maxDepositAmount,
          winner: result.winner,
          status: result.status,
        }
      },
      /**
       * Get the current value of the player1 key in global state
       */
      player1: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player1")) as string | undefined },
      /**
       * Get the current value of the player2 key in global state
       */
      player2: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player2")) as string | undefined },
      /**
       * Get the current value of the depositedAmount key in global state
       */
      depositedAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("depositedAmount")) as bigint | undefined },
      /**
       * Get the current value of the maxDepositAmount key in global state
       */
      maxDepositAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxDepositAmount")) as bigint | undefined },
      /**
       * Get the current value of the winner key in global state
       */
      winner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("winner")) as string | undefined },
      /**
       * Get the current value of the status key in global state
       */
      status: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("status")) as string | undefined },
    },
    /**
     * Methods to access box state for the current Fight app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          player1Move: result.player1Move,
          player2Move: result.player2Move,
        }
      },
      /**
       * Get the current value of the player1Move key in box state
       */
      player1Move: async (): Promise<string | undefined> => { return (await this.appClient.state.box.getValue("player1Move")) as string | undefined },
      /**
       * Get the current value of the player2Move key in box state
       */
      player2Move: async (): Promise<string | undefined> => { return (await this.appClient.state.box.getValue("player2Move")) as string | undefined },
    },
  }

  public newGroup(): FightComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createBox()void method call against the Fight contract
       */
      createBox(params: CallParams<FightArgs['obj']['createBox()void'] | FightArgs['tuple']['createBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createBox(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a depositfunds(txn)void method call against the Fight contract
       */
      depositfunds(params: CallParams<FightArgs['obj']['depositfunds(txn)void'] | FightArgs['tuple']['depositfunds(txn)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.depositfunds(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a sendFunds(address)void method call against the Fight contract
       */
      sendFunds(params: CallParams<FightArgs['obj']['sendFunds(address)void'] | FightArgs['tuple']['sendFunds(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendFunds(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a joinGame(address)void method call against the Fight contract
       */
      joinGame(params: CallParams<FightArgs['obj']['joinGame(address)void'] | FightArgs['tuple']['joinGame(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.joinGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Fight contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FightComposer
  }
}
export type FightComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createBox()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBox(params?: CallParams<FightArgs['obj']['createBox()void'] | FightArgs['tuple']['createBox()void']>): FightComposer<[...TReturns, FightReturns['createBox()void'] | undefined]>

  /**
   * Calls the depositfunds(txn)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositfunds(params?: CallParams<FightArgs['obj']['depositfunds(txn)void'] | FightArgs['tuple']['depositfunds(txn)void']>): FightComposer<[...TReturns, FightReturns['depositfunds(txn)void'] | undefined]>

  /**
   * Calls the sendFunds(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendFunds(params?: CallParams<FightArgs['obj']['sendFunds(address)void'] | FightArgs['tuple']['sendFunds(address)void']>): FightComposer<[...TReturns, FightReturns['sendFunds(address)void'] | undefined]>

  /**
   * Calls the joinGame(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  joinGame(params?: CallParams<FightArgs['obj']['joinGame(address)void'] | FightArgs['tuple']['joinGame(address)void']>): FightComposer<[...TReturns, FightReturns['joinGame(address)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Fight smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FightComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FightComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FightComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FightComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FightComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FightComposerResults<TReturns>>
}
export type FightComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

